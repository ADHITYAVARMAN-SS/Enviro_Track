# -*- coding: utf-8 -*-
"""Weather_Forecasting_main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16nkD6v59JHls44Lwh-8jWlnNrttRhtf2
"""

import numpy as np
import pandas as pd

dataset = pd.read_csv("/content/drive/MyDrive/Space Tech project/WeatherReport.csv")

dataset = dataset.dropna(subset = ['Data.Temperature.Avg Temp'])
dataset = dataset.reset_index(drop = True)
dataset

training_set = dataset.iloc[:1461,1:2].values
training_set

#Feature Scaling
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range=(0,1))
training_set_scaled = sc.fit_transform(training_set)
len(training_set_scaled)

x_train = []
y_train = []
n_future = 4 # next 4 days temperature forecast
n_past = 30 # Past 30 days
for i in range(0,len(training_set_scaled)-n_past-n_future+1):
    x_train.append(training_set_scaled[i : i + n_past , 0])
    y_train.append(training_set_scaled[i + n_past : i + n_past + n_future , 0 ])
x_train , y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0] , x_train.shape[1], 1) )

from keras.models import Sequential
from keras.layers import LSTM,Dense ,Dropout
from tensorflow.keras.layers import Bidirectional

model = Sequential()
model.add(Bidirectional(LSTM(units=30, return_sequences=True, input_shape = (x_train.shape[1],1) ) ))
model.add(Dropout(0.1))
model.add(LSTM(units= 30 , return_sequences=True))
model.add(Dropout(0.1))
model.add(LSTM(units= 30 , return_sequences=True))
model.add(Dropout(0.1))
model.add(LSTM(units= 30))
model.add(Dropout(0.1))
model.add(Dense(units = n_future,activation='linear'))
model.compile(optimizer='adam', loss='mean_absolute_error',metrics=['acc'])
model.fit(x_train, y_train, epochs=1000,batch_size=34 )

testdataset = pd.read_csv('/content/drive/MyDrive/Space Tech project/WeatherReport.csv')
testdataset = testdataset.iloc[30:60, 1:2].values
testdataset

testing = sc.transform(testdataset)
testing = np.array(testing)
testing = np.reshape(testing,(testing.shape[1],testing.shape[0],1))
testing

actual_temperature = pd.read_csv('/content/drive/MyDrive/Space Tech project/WeatherReport.csv')
actual_temperature = actual_temperature.iloc[60:64,1:2].values
actual_temperature

predicted_temperature = model.predict(testing)
predicted_temperature = sc.inverse_transform(predicted_temperature)
predicted_temperature = np.reshape(predicted_temperature,(predicted_temperature.shape[1],predicted_temperature.shape[0]))
predicted_temperature

model.summary()
